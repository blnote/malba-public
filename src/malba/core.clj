;; Copyright 2023 blnote.
;; This file is part of MALBA.

(ns malba.core
  "main namespace. initializes GUI. load database configuration file.
   events from GUI are dispatched through event-dispatch which 
   sets up worker agent that sequentially consumes events (event-consume) that have  dispatched 
   by the UI (event-dispatch)."
  (:gen-class)
  (:require [clojure.string :as string]
            [malba.cache :as c]
            [malba.database :as db]
            [malba.file-io :as f]
            [malba.gephi :as gephi]
            [malba.gui :as gui]
            [malba.logger :as l]
            [malba.algorithms.malba-params :as malba-params]
            [malba.algorithms.proto-algo-params :as algo-params]
            [malba.algorithms.proto-algo :as a]
            [malba.utils :as u]))


;;GLOBALS
(def version "0.5.0")
(def db-conf-file "./test/data/database-local.edn")
(def exit-on-close false)

(def db-conf (atom nil))
(def worker (atom nil))

(defn init-worker
  "init worker agent for time-consuming tasks initiated by user" []
  (let [err-handler (fn [_ e]
                      (tap> e)
                      (l/error (string/join [(ex-message e) (ex-cause e)])))]
    (doto (agent {})
      (set-error-handler! err-handler)
      (set-error-mode! :continue)
      (set-validator! (fn [state] (map? state))))))

(defn show-results!
  "update gephi graph and graph stats labes in UI, optionally clears graph
  and resets view before"
  ([state] (show-results! state false))
  ([{:keys [algo cache]} clear]
   (when clear (gephi/clear-graph))
   (l/status "Updating Preview...")
   (let [subgraph (a/subgraph algo)
         surrounding (a/generate-surrounding algo)]
     (-> (u/assemble-graph-info cache subgraph surrounding)
         gephi/update-graph)
     (gui/invoke :log-graph-size (format "Subgraph: %d nodes. Surrounding: %d nodes."
                                         (count subgraph)
                                         (count surrounding)))
     (gui/invoke :log-parameters (a/get-params-as-string algo))
     (gui/reset-preview)
     (l/status "Preview updated."))))

(defn update-ui!
  "update user interface with current state values"
  [{:keys [seed-file cache seed] :as state}]
  (gui/invoke :set-initialized (and (some? seed) (some? cache)))
  (gui/invoke :set-seed seed-file)
  (when cache
    (when (cache :db) (gui/invoke :set-db-info (cache :db)))
    (when-let [nf (cache :network-file)] (gui/invoke :set-network-file nf)))
  (when-let [algo (state :algo)] (gui/invoke :set-params (a/get-params algo))))

(defn init-algo
  "initializes algorithm if seed is loaded and network is available (cache not nil).
   fetches parameters from gui"
  [{:keys [seed cache] :as state}]
  (if (and seed cache)
    (let [_ (l/status "Initializing...")
          valid-seeds (c/known-ids cache seed)]
      (when (empty? valid-seeds) (throw (Exception. "None of the seeds found in network!")))
      (l/text (format "Found %d of %d seeds in network." (count valid-seeds) (count seed)))
      (let [pa (gui/invoke :get-params)
            algo-name (pa :name)
            new-state (-> state
                          (assoc :algo (a/init (u/algo-from-name algo-name) cache valid-seeds))
                          (update :algo a/set-params pa)
                          (assoc :algo-name (pa :name)))]
        (l/text (format ">>> Algorithm %s initialized." algo-name))
        (gui/invoke :set-initialized true) ;activate algorithm control in ui 
        (show-results! new-state true)
        (l/status "Initialized.")
        new-state))
    (do
      (gui/invoke :set-initialized false)
      (dissoc state :algo))))

(defn without-algo-buttons
  "disable algorithm buttons and enable stop button when executing expr"
  [expr]
  (try
    (gui/invoke :enable-algo-btns false)
    (expr)
    (finally (gui/invoke :enable-algo-btns true))))

(defn event-consume
  "main work horse. this function is send to the worker agent
   together with the event generated by the user. it is then called by the agent
   and the events are consumed"
  [state event params]
  (l/event-to-status event :start)
  (doto (condp = event
          "save-session" (doto state (u/save-session! params))
          "load-session" (let [state (u/load-session params)]
                           (l/text (format ">>> Loaded session from %s." (.getName ^java.io.File params)))
                           (doto state (show-results! true) update-ui!))
          "load-seed" (let [seed-file (.getName ^java.io.File params)
                            seed (f/load-seed params)]
                        (when (empty? seed)
                          (throw (Error. (format "No seeds found in %s." seed-file))))
                        (l/text (format ">>> Loaded %d seeds from %s." (count seed) seed-file))
                        (-> state
                            (assoc :seed seed)
                            (assoc :seed-file seed-file)
                            (doto update-ui!)))
          "load-network" (let [network-file (.getName ^java.io.File params)
                               C (c/from-file params)]
                           (l/text (format ">>> Loaded network from %s." network-file))
                           (-> state (assoc :cache C) (doto update-ui!)))
          "db-connect" (if-let  [db (get-in state [:cache :db])]
                         (assoc-in state [:cache :db]
                                   (-> (merge db (gui/invoke :get-db-info))
                                       db/close!
                                       db/connect)) ;reconnect
                         (let [C (-> @db-conf
                                     (merge (gui/invoke :get-db-info))
                                     (doto (tap>))
                                     db/connect
                                     c/init ;initalize cache with db-connection 
                                     )]
                           (-> state (assoc :cache C))))
          "clear-cache" (if (and (state :cache) ;if cache and db info exists
                                 (get-in state [:cache :db]))
                          (assoc state :cache (c/init (get-in state [:cache :db])))
                          state)
          "algo-step" (without-algo-buttons
                       #(let [pa (gui/invoke :get-params)]
                          (if (u/algo-changed? state pa) (init-algo state)
                              (let [algo (-> (state :algo) (a/set-params pa) a/step)
                                    error (a/error algo)]
                                (cond
                                  (= error :sql-query-too-large)
                                  (throw (Error. "SQL-query too large. (> max-sql-query-size)"))
                                  (= error :subgraph-too-large)
                                  (throw (Error. "Subgraph too large!"))
                                  (a/interrupted? algo) (do (l/text ">>> Step interrupted.") state)
                                  (a/terminated? algo)
                                  (do (l/text ">>> Terminated: no new elements added in cycle!")
                                      (doto (assoc state :algo algo) show-results!))
                                  :else (doto (assoc state :algo algo) show-results!))))))
          "algo-run" (without-algo-buttons
                      #(let [pa (gui/invoke :get-params)
                             state (if (u/algo-changed? state pa) (init-algo state) state)
                             algo (-> (state :algo) (a/set-params pa) a/run)
                             error (a/error algo)]
                         (cond
                           (= error :sql-query-too-large)
                           (throw (Exception. "SQL-query too large. (> max-sql-query-size)"))
                           (= error :subgraph-too-large)
                           (throw (Error. "Subgraph too large!"))
                           (a/interrupted? algo)
                           (do (l/text (format ">>> Interrupted after %d cycles!" (a/steps algo)))
                               (doto (assoc state :algo algo) show-results!))
                           (a/terminated? algo)
                           (do (l/text (format ">>> Terminated after %d cycles!" (a/steps algo)))
                               (doto (assoc state :algo algo) show-results!))
                           :else (throw (Exception. "Unknown algorithm state.")))))
          "algo-reset" (do (gephi/view-reset) (init-algo state))
          "algo-search" (without-algo-buttons
                         #(let [pa (gui/invoke :get-params)
                                state (if (u/algo-changed? state pa) (init-algo state) state)]
                            (l/text ">>> Starting parameter search...")
                            (let [{:keys [interrupted params size]}
                                  (-> (state :algo) (a/set-params pa) a/search)]
                              (if interrupted
                                (l/text "\nParameter search interrupted!")
                                (l/text "\nParameter search completed!"))
                              (if (nil? params)
                                (l/text "No valid parameters found.")
                                (do
                                  (l/text (format "Max: %s subgraph: %s" (algo-params/to-string params) size))
                                  (l/text "Parameters updated, run algorithm to view subgraph.")
                                  (doto (update state :algo a/set-params params)
                                    (update-ui!)))))
                            state))
          "view-reset" (do (gephi/view-reset) (gui/reset-preview) state)
          "view-surrounding" (do (gephi/view-surrounding params) (gui/refresh) state)
          "view-neighbors" (do (gephi/view-neighbors params) (gui/refresh) state)
          "hovered" (do (when (> 1000 (- (System/currentTimeMillis) (params :time)))
                          (let [node-info (gephi/hovered (params :event))]
                            (gui/show-details (u/generate-detail-str node-info))
                            (gui/refresh)))
                        state)
          "copy-to-clipboard" (let [node-info (gephi/hovered params)]
                                (u/copy-to-clipboard (u/generate-detail-str node-info))
                                state)
          "layout" (do (gephi/layout-graph params) (gui/reset-preview) state)
          "export" (do (gephi/export params) state)
          "window-close" (when (state :cache)
                           (db/close! (get-in state [:cache :db])))
          (throw (IllegalAccessError. (format "%s not yet implemented..." event))))
    ((fn [_] (l/event-to-status event :stop)))))


(defn event-dispatch
  "called from event-callbacks in ui thread. events are send to a worker agent and thus will be queued and consumed sequentially due to concurrency with gephi."
  ([^String event] (event-dispatch event {}))
  ([^String event params]
   (let [worker @worker] ;dereferences atom containing worker
     (l/debug (format "Dispatching event %s with parameters %s" event (str params)))
     (if (= event "algo-stop")
       (do (reset! (get-in @worker [:algo :interrupted]) true)
           (l/status "Stopping algorithm..."))
       (do
         (send worker event-consume event params)
       ;try algorithm initialization automatically after the following events:
         (when (contains? #{"db-connect" "load-seed" "load-network"} event)
           (send worker init-algo)))))
   nil))

(defn -main [& _]
  ;initialize background worker thread
  (reset! worker (init-worker))
  ;init GUI
  (gui/init event-dispatch {:version version :exit_on_close exit-on-close})
  ;init gephi and preview area with rendering target
  (gui/attach-preview (gephi/init) event-dispatch)
  ;set default algorithm parameters
  (gui/invoke :set-params (-> (malba-params/->Params) (algo-params/init) (algo-params/get-vars)))
  ;load db configuration
  (if-let [conf (f/load-config db-conf-file)]
    (do (reset! db-conf conf)
        (l/text (format "Database config loaded from %s." db-conf-file)))
    (l/error (format "Database config not readable from %s!\n Database mode will not work."
                     db-conf-file)))
  ;send db config to UI
  (gui/invoke :set-db-info @db-conf))



(comment
  ;Start program with 
  (-main))


